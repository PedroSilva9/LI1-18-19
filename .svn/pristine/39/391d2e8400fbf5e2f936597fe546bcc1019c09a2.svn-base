-- | Este módulo define funções comuns da Tarefa 5 do trabalho prático.
module Main where
import LI11819
import Typos
import Graphics.Gloss
import Data.List ((\\))
import Data.Maybe (isJust,fromJust)
import Powerups (generatePowerUp,fetchPowerUps)
import ReageEvento (reageEvento)
import DesenhaJogo (desenhaEstado,posVazia)
import EstadoInicial (estadoI)
import Tarefa2_2018li1g027 (jogada)
import Tarefa4_2018li1g027 (tick,groupN,asSqr)
import Tarefa6_2018li1g027 (bot)

-- | Função principal da Tarefa 5.
--
-- __NB:__ Esta Tarefa é completamente livre. Deve utilizar a biblioteca <http://hackage.haskell.org/package/gloss gloss> para animar o jogo, e reutilizar __de forma completa__ as funções das tarefas anteriores.

reageTempo :: Float -> EstadoGloss -> EstadoGloss
reageTempo n e = if fst (checkVitoria fetch{tickCounter = newticks}) && ((not . menu $ e) && (not . criaMapa $ e))
  then e{menu = True, winner = winPlr, tMenu = (imagensMenu . imagens $ e) !! (winPlr + 6)}
  else fetch{tickCounter = newticks}  
    where
      newEstado             = tick . estado $ e
      allPos                = [(l,c) | l <- [0 .. pred . length . mapaEstado $ newEstado], c <- [0 .. pred . length . head . mapaEstado $ newEstado]]
      allPosGroup           = groupN allPos $ length . head . mapaEstado $ newEstado
      vazias                = posVazia (mapaEstado newEstado) allPosGroup
      puPos                 = map posicaoPowerUp $ powerups e
      (players, playersPos) = (jogadoresEstado . estado $ e, map posicaoJogador players)
      (botind, botPlay)     = (botIndex e,map (flip bot newEstado) botind)
      newBotEst             = applyPlay (zip botPlay botind) newEstado
      newEstadoGloss        = e{estado = newBotEst, empty = (vazias \\ puPos) \\ concatMap asSqr playersPos}
      generate              = if (null . empty $ newEstadoGloss) || menu e || criaMapa e then newEstadoGloss else generatePowerUp newEstadoGloss
      fetch                 = if (null . powerups $ generate)    || menu e || criaMapa e then generate else fetchPowerUps generate
      newticks              = succ . tickCounter $ e
      winPlr                = snd $ checkVitoria fetch{tickCounter = newticks}

applyPlay :: [(Maybe Jogada,Int)] -> Estado -> Estado
applyPlay [] e = e
applyPlay l e = aux possiblePlays e 
  where
    possiblePlays = filter (isJust . fst) l
    aux :: [(Maybe Jogada,Int)] -> Estado -> Estado
    aux [] e = e 
    aux ((jog,ind):t) e = aux t (jogada ind (fromJust jog) e)   

checkVitoria :: EstadoGloss -> (Bool,Int)
checkVitoria e = (howManyDead == 3 ,checkWhoWins vidaslist 0)
  where
    listajog    = jogadoresEstado . estado $ e
    vidaslist   = map vidasJogador listajog
    deadPlayers = filter (== 0) vidaslist
    howManyDead = length deadPlayers 
    checkWhoWins :: [Int] -> Int -> Int
    checkWhoWins [] ind = ind
    checkWhoWins (h:t) ind = if h > 0 then ind else checkWhoWins t (succ ind)



dm ::Display
dm = InWindow "Tanks" (1280,720) (300,200)

fr :: Int
fr = 60

main :: IO ()
main = do tank1         <- loadBMP "Pictures/Tanks/tank1.bmp"
          tank2         <- loadBMP "Pictures/Tanks/tank2.bmp"
          tank3         <- loadBMP "Pictures/Tanks/tank3.bmp"
          tank4         <- loadBMP "Pictures/Tanks/tank4.bmp"
          menuSM        <- loadBMP "Pictures/Menus/MenuSelectMap.bmp"
          menuStart     <- loadBMP "Pictures/Menus/MenuStart2.bmp"
          menuCM        <- loadBMP "Pictures/Menus/MenuCriaMapa.bmp"
          menuJogar     <- loadBMP "Pictures/Menus/MenuJogar.bmp"
          menuQJM       <- loadBMP "Pictures/Menus/MenuEscolhaJogador.bmp"
          menuInvalidMM <- loadBMP "Pictures/Menus/MenuInvalidMM.bmp"
          menuInvalidTA <- loadBMP "Pictures/Menus/MenuInvalidTA.bmp"
          menuFinalR1   <- loadBMP "Pictures/Menus/MenuFinalVitoriaR1.bmp"
          menuFinalR2   <- loadBMP "Pictures/Menus/MenuFinalVitoriaR2.bmp"
          menuFinalR3   <- loadBMP "Pictures/Menus/MenuFinalVitoriaR3.bmp"
          menuFinalR4   <- loadBMP "Pictures/Menus/MenuFinalVitoriaR4.bmp"
          menuFinalM1   <- loadBMP "Pictures/Menus/MenuFinalVitoriaM1.bmp"
          menuFinalM2   <- loadBMP "Pictures/Menus/MenuFinalVitoriaM2.bmp"
          menuFinalM3   <- loadBMP "Pictures/Menus/MenuFinalVitoriaM3.bmp"
          menuFinalM4   <- loadBMP "Pictures/Menus/MenuFinalVitoriaM4.bmp"
          infoCM        <- loadBMP "Pictures/Menus/InfoCriaMapa.bmp"
          pecaI         <- loadBMP "Pictures/Mapa/indestrutivel.bmp"
          pecaD         <- loadBMP "Pictures/Mapa/destrutivel.bmp"
          pecaV         <- loadBMP "Pictures/Mapa/PecaV.bmp"
          tiroC1        <- loadBMP "Pictures/Tanks/TiroC1.bmp"
          tiroC2        <- loadBMP "Pictures/Tanks/TiroC2.bmp"
          tiroC3        <- loadBMP "Pictures/Tanks/TiroC3.bmp"
          tiroC4        <- loadBMP "Pictures/Tanks/TiroC4.bmp"
          tiroL1        <- loadBMP "Pictures/Tanks/laser2.bmp"
          tiroL2        <- loadBMP "Pictures/Tanks/laser1.bmp"
          tiroL3        <- loadBMP "Pictures/Tanks/laser3.bmp"
          tiroL4        <- loadBMP "Pictures/Tanks/laser4.bmp"
          choque1       <- loadBMP "Pictures/Tanks/force1.bmp"
          choque2       <- loadBMP "Pictures/Tanks/force2.bmp"
          choque3       <- loadBMP "Pictures/Tanks/force3.bmp"
          choque4       <- loadBMP "Pictures/Tanks/force4.bmp"
          pUpLaser      <- loadBMP "Pictures/ImagensPowerUps/laser.bmp"
          pUpChoque     <- loadBMP "Pictures/ImagensPowerUps/Choque.bmp"
          pUpTeleport   <- loadBMP "Pictures/ImagensPowerUps/teleport.bmp"
          pUpVidas      <- loadBMP "Pictures/ImagensPowerUps/Vidas.bmp"
          zero          <- loadBMP "Pictures/Counter/zero.bmp"
          one           <- loadBMP "Pictures/Counter/one.bmp"
          two           <- loadBMP "Pictures/Counter/two.bmp"
          three         <- loadBMP "Pictures/Counter/three.bmp"
          four          <- loadBMP "Pictures/Counter/four.bmp"
          five          <- loadBMP "Pictures/Counter/five.bmp"
          six           <- loadBMP "Pictures/Counter/six.bmp"
          seven         <- loadBMP "Pictures/Counter/seven.bmp"
          eight         <- loadBMP "Pictures/Counter/eight.bmp"
          nine          <- loadBMP "Pictures/Counter/nine.bmp"
          estadoJog1    <- loadBMP "Pictures/Tanks/estadoJog1.bmp"
          estadoJog2    <- loadBMP "Pictures/Tanks/estadoJog2.bmp"
          estadoJog3    <- loadBMP "Pictures/Tanks/estadoJog3.bmp"
          estadoJog4    <- loadBMP "Pictures/Tanks/estadoJog4.bmp"
          let
            imagesMenu = [menuStart, menuCM, menuJogar, menuQJM,menuInvalidMM,menuInvalidTA,menuFinalM1,menuFinalM2,menuFinalM3,menuFinalM4,menuFinalR1,menuFinalR2,menuFinalR3,menuFinalR4,menuSM,infoCM]
            imagesJogo = [pecaI,pecaD,pecaV,tank1,tank2,tank3,tank4,tiroC1,tiroC2,tiroC3,tiroC4,tiroL1,tiroL2,tiroL3,tiroL4,choque1,choque2,choque3,choque4,estadoJog1,estadoJog2,estadoJog3,estadoJog4]
            imagesPowerUps = [pUpLaser,pUpChoque,pUpTeleport,pUpVidas]
            imagesTickCounter = [zero,one,two,three,four,five,six,seven,eight,nine]
            estadoImagens = Imagens imagesMenu imagesJogo imagesPowerUps imagesTickCounter
          play dm 
               (withBlue 0.3 blue)
               fr
               (estadoI estadoImagens)
               desenhaEstado
               reageEvento
               reageTempo

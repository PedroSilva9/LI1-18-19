-- | Este módulo define funções comuns da Tarefa 1 do trabalho prático.
module Tarefa1_2018li1g027 where
import Data.List
import Data.Char
import Matrizes
import LI11819

type Vetor = (Int,Int)

-- * Testes

testesT1 :: [Instrucoes]
testesT1 = [[Move C,Move E,Move C,Move E,Move C,Move E,Move D,Move D,Move D,Move D,Move D,Move D,Move D,Move D,Move D,Move D,Move D,Move D,Move D,Move D,Move B,Move B,Desenha,Move E,Move E,Move E,Move E,Move E,Move E,Move E,Move E,Move E,Move E,Desenha,Move C,Move D,Move D,Roda,Desenha,Move D,Move D,MudaTetromino,MudaTetromino,Move B,Move B,Desenha],[Roda,MudaTetromino,Desenha,Move B,Move B,Move B,Move D,Move D,Desenha,Roda,MudaTetromino,Move C,Move C,Move D,Move D,Move D,Move C,Desenha,MudaTetromino,Move B,Move B,Move B,Desenha,Move E,Move E,Move E,Move E,Move E,Move C,Desenha,Move B,Move B,Move B,Move B,Move B,Roda,MudaTetromino,Move D,Desenha,Move D,Move D,MudaTetromino,Desenha,Move D,Move D,MudaParede,Desenha]]

---- | Funções principais da Tarefa 1.

-- | Aplica uma instrução num editor.
--    * Move - move numa dada direção.
--    * MudaTetromino - seleciona a peça seguinte (usar a ordem léxica na estrutura de dados),
--       sem alterar os outros parâmetros.
--    * MudaParede - muda o tipo de parede.
--    * Desenha - altera o mapa para incluir o tetrómino atual, sem alterar os outros parâmetros.
instrucao :: Instrucao -> Editor -> Editor
instrucao (Move d) (Editor pos dir tet wall mapa) = Editor newP dir tet wall mapa
  where 
        (a,b) = dir2vec d
        (x,y) = pos
        newP = (a + x, b + y)
instrucao Roda (Editor pos dir tet wall mapa) = Editor pos newD tet wall mapa
  where 
        newD = toEnum . (flip mod 4) . succ . fromEnum $ dir
instrucao MudaTetromino (Editor pos dir tet wall mapa) = Editor pos dir newT wall mapa 
  where
        newT = toEnum . (flip mod 7) . succ . fromEnum $ tet
instrucao MudaParede (Editor pos dir tet wall mapa) = Editor pos dir tet newWall mapa
  where
        newWall = toEnum . (flip mod 2) . succ . fromEnum $ wall
instrucao Desenha (Editor pos dir tet wall mapa) = Editor pos dir tet wall newMapa
  where
        tetpos = targets pos $ rotateMatrix dir $ (!!) allM $ fromEnum tet
        newMapa = desenha mapa wall tetpos

-- | Aplica uma sequência de instruções num editor.
-- | Deve chamar a função @instrucao@.
instrucoes :: Instrucoes -> Editor -> Editor
instrucoes t e = foldl (flip instrucao) e t

-- | Cria um mapa inicial com paredes nas bordas e o resto vazio.
mapaInicial :: Dimensao -> Mapa
mapaInicial (l,c) = let mapa = map (\p -> (Bloco Indestrutivel) : p ++ [Bloco Indestrutivel]) $ mapaVazio (l-2, c-2)
                    in parede : mapa ++ [parede] where
    parede = replicate c $ Bloco Indestrutivel
    mapaVazio :: Dimensao -> Mapa
    mapaVazio (li,co) = replicate li $ replicate co Vazia

rotateMatrix :: Direcao -> Matriz Bool -> Matriz Bool
rotateMatrix C m = m
rotateMatrix D m = transpose . reverse $ m
rotateMatrix B m = reverse . transpose $ reverse . transpose $ m
rotateMatrix E m = transpose . map reverse $ m

dir2vec :: Direcao -> Vetor
dir2vec C = (-1,0)
dir2vec D = (0,1)
dir2vec B = (1,0)
dir2vec E = (0,-1)

-- | Cria um editor inicial, usando a peça I indestrutível voltada para cima.
-- | Deve chamar as funções @mapaInicial@, @dimensaoInicial@, e @posicaoInicial@.
editorInicial :: Instrucoes -> Editor
editorInicial i =  Editor (posicaoInicial i) C I Indestrutivel (mapaInicial . dimensaoInicial $ i)

targets :: Posicao -> Matriz Bool -> [Posicao]
targets _ [] = []
targets (l,c) (h:t) = target (l,c) h ++ targets (l+1,c) t

target :: Posicao -> [Bool] -> [Posicao]
target _ [] = []
target (l,c) (h:t) | h = (l,c) : target (l,c+1) t 
                   | otherwise =  target (l,c+1) t

atualizaIndiceLista :: Int -> a -> [a] -> [a]
atualizaIndiceLista _ _ [] = [] 
atualizaIndiceLista 0 e (_:t) = e : t
atualizaIndiceLista i e (h:t) = h : atualizaIndiceLista (i-1) e t

atualizaPosicaoMatriz :: Posicao -> a -> Matriz a -> Matriz a
atualizaPosicaoMatriz (0, y) a (h:t) = atualizaIndiceLista y a h : t
atualizaPosicaoMatriz (x, y) a (h:t) = h : atualizaPosicaoMatriz (x-1, y) a t
atualizaPosicaoMatriz _ _ [] = []

desenha :: Mapa -> Parede -> [Posicao] -> Mapa
desenha m _ [] = m
desenha m wall (h:t) = desenha (atualizaPosicaoMatriz h (Bloco wall) m) wall t

-- | Constrói um @Mapa@ dada uma sequência de @Instrucoes@.
-- | Deve chamar as funções @instrucoes@ e @editorInicial@.
constroi :: Instrucoes -> Mapa
constroi i = mapaEditor . (instrucoes i) .  editorInicial $ i

printMapa m = mapM_ print stringMap
  where
    stringMap = map (map pecaToChar) m
    pecaToChar Vazia = '.'
    pecaToChar (Bloco Destrutivel) = 'D'
    pecaToChar (Bloco Indestrutivel) = 'P'

pm = printMapa . constroi
